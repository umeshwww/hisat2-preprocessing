import yaml

include: "/scripts/snakemake-scripts.py"

configfile: "/config/config.yml"

fastqdir = "/fastq"
samples = get_samples(fastqdir)
config = parse_config(config, samples)

# "/meta/hisat2"
indexdir = str(Path(config['metadir'])/"hisat2")
# "/meta/genome.fasta"
fastafile = str(Path(config['metadir'])/config['fasta'])
# "genome"
indexname = str(Path(config['fasta']).stem)
# "/meta/hisat2/genome"
indexstem = str(Path(indexdir)/indexname)
# "/meta/annotation.gtf"
gtffile = str(Path(config['metadir'])/config['gtf'])
bedfile = str(Path(gtffile).with_suffix(".bed"))

indexfiles = expand(
    indexstem+".{i}.ht2",
    i=range(1,9))


rule all:
    input:
        "config.yml",
        # count matrix
        "counts/merged.tsv",
        # qc from htseq_qc
        expand("qc/htseq_qc/{sample}.pdf", sample=samples.keys()),
        # multiqc outputs
        "qc/multiqc/summary.html",
        "qc/multiqc/fastqc.html",
        "qc/multiqc/fastqc_trimmed.html",
        "qc/multiqc/trimmomatic.html"
    shell:
        "echo 'All good!' | figlet -f slant | /usr/games/cowsay -n -f /scripts/nyan.cow | /usr/games/lolcat"

# writes the updated config file to the output directory
rule storeconfig:
    output:
        "config.yml"
    run:
        with open(output[0],"w") as f:
            yaml.dump(config, f, default_flow_style=False)


rule clean:
    shell:
        "rm -rf /output/* {md}/*.bed {md}/hisat2/*".format(md=config['metadir'])


rule samtools_sort:
    input:
        "mapped/unsorted/{sample}.bam"
    output:
        "mapped/sorted/{sample}.bam"
    params:
        "-m 4G"
    threads: 8
    wrapper:
        "0.2.0/bio/samtools/sort"


rule htseq:
    input:
        bam="mapped/sorted/{sample}.bam",
        gtf=gtffile
    output:
        temp("counts/separate/{sample}.tsv")
    log:
        "logs/htseq/{sample}.log"
    shell:
        """htseq-count --order=pos --format=bam \
        {input.bam} {input.gtf} > {output} 2> {log}"""


rule htseq_merge:
    input:
        expand("counts/separate/{sample}.tsv", sample=samples.keys())
    output:
        "counts/merged.tsv"
    script:
        "/scripts/merge-counts.py"


rule multiqc_summary:
    input:
        expand("counts/separate/{sample}.tsv", sample=samples.keys()),
        expand("logs/hisat2/{sample}.log", sample=samples.keys()),
        expand("qc/rseqc/{sample}.rseqc.txt", sample=samples.keys()),
    output:
        "qc/multiqc/summary.html"
    params:
        ""
    log:
        "logs/multiqc.log"
    wrapper:
        "0.27.1/bio/multiqc"


rule multiqc_fastqc:
    input:
        expand("qc/fastqc/{sample}_R{read}_fastqc.zip",
               sample=samples.keys(),
               read=[1, 2] if config['mode']=="paired" else [1])
    output:
        "qc/multiqc/fastqc.html"
    params:
        ""
    log:
        "logs/multiqc.log"
    wrapper:
        "0.27.1/bio/multiqc"


rule multiqc_fastqc_trimmed:
    input:
        expand("qc/fastqc_trimmed/{sample}_R{read}_fastqc.zip",
               sample=samples.keys(),
               read=[1, 2] if config['mode']=="paired" else [1])
    output:
        "qc/multiqc/fastqc_trimmed.html"
    params:
        ""
    log:
        "logs/multiqc.log"
    wrapper:
        "0.27.1/bio/multiqc"


rule multiqc_trimmomatic:
    input:
        expand("logs/trimmomatic/{mode}/{sample}.log",
               mode=[config['mode']], sample=samples.keys())
    output:
        "qc/multiqc/trimmomatic.html"
    params:
        ""
    log:
        "logs/multiqc/trimmomatic.log"
    wrapper:
        "0.27.1/bio/multiqc"


rule htseq_qa:
    input:
        "mapped/sorted/{sample}.bam",
    output:
        "qc/htseq_qc/{sample}.pdf"
    shell:
        """htseq-qa --type=bam {input} --outfile={output} --maxqual=60"""


rule hisat2index:
    input:
        fastafile
    output:
        indexfiles
    log:
        "logs/hisat2-index.log"
    shell:
        "cd " + indexdir + " && "
        "hisat2-build {input} " + indexname


rule hisat2:
    input:
        # the function below selects either single or paired inputs
        # depending on the option 'mode'
        index=indexfiles,
        # reads=lambda wildcards: hisat2_input(
        #     wildcards, config['mode'])
        reads=lambda wildcards: hisat2_input(
            wildcards, config['mode'])
    output:
        temp("mapped/unsorted/{sample}.bam")
    log:
        "logs/hisat2/{sample}.log"
    params:
        idx=indexstem,
        extra="--new-summary"
    threads: 8
    wrapper:
        "0.27.1/bio/hisat2"


rule trimmomatic_se:
    input:
        "merged/{sample}_R1.fastq"
    output:
        temp("trimmed/single/{sample}_R1.fastq")
    log:
        "logs/trimmomatic/single/{sample}.log"
    params:
        # list of trimmers (see manual)
        trimmer=config['trimmer'],
        # optional parameters
        extra="-phred33 -threads 10"
    threads: 10
    wrapper:
        "0.27.1/bio/trimmomatic/se"


rule trimmomatic_pe:
    input:
        r1="merged/{sample}_R1.fastq",
        r2="merged/{sample}_R2.fastq"
    output:
        r1=temp("trimmed/paired/{sample}_R1.fastq"),
        r2=temp("trimmed/paired/{sample}_R2.fastq"),
        # reads where trimming entirely removed the mate
        r1_unpaired=temp("trimmed/paired/{sample}.1.unpaired.fastq.gz"),
        r2_unpaired=temp("trimmed/paired/{sample}.2.unpaired.fastq.gz")
    log:
        "logs/trimmomatic/paired/{sample}.log"
    params:
        # list of trimmers (see manual)
        trimmer=config['trimmer'],
        # optional parameters
        extra="-phred33 -threads 10"
    threads: 10
    wrapper:
        "0.27.1/bio/trimmomatic/pe"


rule merge:
    input:
        lambda wildcards: samples[wildcards.sample][wildcards.read]
    output:
        temp("merged/{sample}_R{read}.fastq")
    log:
        "logs/merging/{sample}_R{read}_merge.log"
    shell:
        """
        echo {input} | tr ' ' '\n' > {log};
        zcat {input} > {output}"""


rule fastqc_trimmed:
    input:
        expand("trimmed/{mode}/{{sample}}_R{{read}}.fastq",
               mode=[config['mode']])
    output:
        html="qc/fastqc_trimmed/{sample}_R{read}_fastqc.html",
        zip="qc/fastqc_trimmed/{sample}_R{read}_fastqc.zip"
    params: ""
    log:
        "logs/fastqc/{sample}_R{read}.log"
    wrapper:
        "0.27.1/bio/fastqc"


rule fastqc:
    input:
        "merged/{sample}_R{read}.fastq"
    output:
        html="qc/fastqc/{sample}_R{read}_fastqc.html",
        zip="qc/fastqc/{sample}_R{read}_fastqc.zip"
    params: ""
    log:
        "logs/fastqc/{sample}_R{read}.log"
    wrapper:
        "0.27.1/bio/fastqc"


rule gtf2bed:
    input:
        gtffile
    output:
        bedfile
    shell:
        "/scripts/gtf2bed {input} > {output}"


rule rseqc:
    input:
        bam="mapped/sorted/{sample}.bam",
        bed=bedfile
    output:
        "qc/rseqc/{sample}.rseqc.txt"
    shell:
        "read_distribution.py -i {input.bam} -r {input.bed} > {output}"
